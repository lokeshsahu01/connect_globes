# Generated by Django 3.1.5 on 2021-02-11 10:03

import admin_users.models
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='ArtistJuniorProfile',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('user_id', models.CharField(max_length=250)),
                ('address', models.TextField(blank=True, max_length=10000, null=True)),
                ('father_name', models.CharField(blank=True, max_length=250, null=True)),
                ('dob', models.DateField(blank=True, null=True)),
                ('age_proof_id', models.CharField(blank=True, max_length=250, null=True)),
                ('age_proof_id_no', models.CharField(blank=True, max_length=250, null=True)),
                ('age_proof_id_file', models.FileField(blank=True, null=True, upload_to=admin_users.models.ArtistJuniorProfile.folder_path)),
                ('user_image', models.FileField(blank=True, null=True, upload_to=admin_users.models.ArtistJuniorProfile.folder_path)),
                ('slug', models.CharField(blank=True, max_length=250, null=True)),
                ('meta_description', models.TextField(blank=True, max_length=10000, null=True)),
                ('meta_keyword', models.CharField(blank=True, max_length=250, null=True)),
                ('meta_title', models.CharField(blank=True, max_length=250, null=True)),
                ('profile_description', models.TextField(blank=True, max_length=65000, null=True)),
                ('is_approved', models.BooleanField(default=False)),
                ('is_featured', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='BuyerProfile',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('address', models.TextField(blank=True, max_length=10000, null=True)),
                ('user_id', models.CharField(max_length=250)),
            ],
        ),
        migrations.CreateModel(
            name='CompanyUserProfile',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('user_id', models.CharField(max_length=250)),
            ],
        ),
        migrations.CreateModel(
            name='UserDepartment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('department', models.CharField(max_length=250, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='UserRole',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('role', models.CharField(max_length=250, unique=True)),
                ('is_create_user', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('user_role', models.CharField(blank=True, max_length=250, null=True)),
                ('email', models.EmailField(blank=True, max_length=255, null=True)),
                ('user_department', models.CharField(blank=True, max_length=250, null=True)),
                ('mobile', models.CharField(blank=True, max_length=13, null=True, unique=True)),
                ('first_name', models.CharField(blank=True, max_length=250, null=True)),
                ('last_name', models.CharField(blank=True, max_length=250, null=True)),
                ('is_mobile', models.BooleanField(default=False)),
                ('account_id', models.IntegerField(unique=True)),
                ('is_email', models.BooleanField(default=False)),
                ('token', models.TextField(blank=True, max_length=20000, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('sub_user', models.CharField(blank=True, max_length=250, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name_plural': 'User',
            },
        ),
    ]
